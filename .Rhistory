str(pima)
pima[pima == 0] <- NA
summary(pima)
pima[pima[-pregnant] == 0] <- NA
pima[pima[-pima$pregnant] == 0] <- NA
data(pima) # loads "pima"" dataset
pima$test <- factor(pima$test, labels = c("negative", "positive"))
str(pima)
head(pima$diastolic, 100)
head(sort(pima$diastolic), 100)
#slicno, vrednost nula ne bi smele da imaju ni promenljive (kolone) glucose, insulin, bmi,..
#svuda gde je nula stavljamo NA vrednosti
pima$diastolic[pima$diastolic == 0]  <- NA
pima$glucose[pima$glucose == 0] <- NA
pima$triceps[pima$triceps == 0]  <- NA
pima$insulin[pima$insulin == 0] <- NA
pima$bmi[pima$bmi == 0] <- NA
summary(pima$test)
plot(diabetes ~ diastolic, data = pima)
sunflowerplot(diabetes ~ diastolic, data = pima)
library(MASS)
install.packages("corrplot")
corrplot(corrMat, method = "ellipse", rm.na = TRUE)
?corrplot
library(corrplot)
?corrplot
?cor
numericalVars <- select_if(pima, is.numeric)
if(!require("faraway")){
install.packages("faraway")
}
library(faraway)
library(dplyr)
library(ggplot2)
library(corrplot)
library(MASS)
data(pima) # loads "pima"" dataset
pima$test <- factor(pima$test, labels = c("negative", "positive"))
str(pima)
summary(pima$test)
pima$diastolic[pima$diastolic == 0]  <- NA
pima$glucose[pima$glucose == 0] <- NA
pima$triceps[pima$triceps == 0]  <- NA
pima$insulin[pima$insulin == 0] <- NA
pima$bmi[pima$bmi == 0] <- NA
numericalVars <- select_if(pima, is.numeric)
# Racunamo korelacionu matricu za numericke podatke
corrMat <- cor(numericalVars)
numericalVars
# Racunamo korelacionu matricu za numericke podatke, parametar use = use = "complete.obs"
# znaci da koristimo iskljucivo vrste (opservacije) bez "NA"
corrMat <- cor(numericalVars, use = "complete.obs")
# Generisemo "correlation ellipse plot"
corrplot(corrMat, method = "ellipse")
plot(iris)
pairs(iris)
str(iris)
str(iris)
library(ggplot2)
library(dplyr)
library(tidyr)
# broj promenljivih i broj opservacija
str(iris)
dim(iris)
# Nekoliko prvih i poslednjih vrsta iz `iris` baze
head(iris)
tail(iris)
# sumarna statistika za podatke u `iris` bazi
summary(iris)
plot(iris) #rezultat ce biti isti kao da smo upotrebili `pairs` funkciju iz `base` bilioteke
ggplot(iris, aes( x = Sepal.Width, y = Sepal.Length, col = Species))+
geom_point() +
geom_smooth(method = "lm")
tidy_iris <- separate(iris)
library(tidyr)
tidy_iris <- unite(iris, length, Sepal.Length, Petal.Length, sep = ".")
head(tidy_iris)
tidy_iris <- gather(iris, length, Sepal.Length, Petal.Length)
tidy_iris <- gather(iris, length, Sepal.Length, Petal.Length)
head(tidy_iris)
tidy_iris <- gather(iris, length, Sepal.Length, Petal.Length, sep = ".")
head(iris)
tidy_iris <- unite(iris, length, Sepal.Length, Petal.Length)
head(iris)
tidy_iris <- gather(iris, Width,-c(Petal.Length, Petal.Width, Species))
tidy_iris <- gather(iris, Width,-c(Sepal.Length, Petal.Lenth, Species))
tidy_iris <- gather(iris, Width,-c(Sepal.Length, Petal.Length, Species))
ggplot(iris, aes( x = Sepal.Width, y = Sepal.Length, col = Species))+
geom_point() +
geom_smooth(method = "lm", se = FALSE)
?wage
str(wage)
install.packages("Wage")
install.packages("ISLR")
library(ISLR)
data("Wage")
str(Wage)
?lm
# Ucitavamo "Wage" bazu iz "ISLR" paketa koja sadrzi neke opste podatke o radnicima u srednje-Atlanstkom regionu SAD i njihovim prihodima
library(ISLR)
data("Wage")
# Generisemo linearni model "lm_wage"
lm_wage <- lm(wage ~ age, data = Wage)
?lm #kako se funkcija "lm()" koristi
# Definisemo data.frame sa novim vrednostima, koje nisu koriscenje za sintezu modela: "unseen"
unseen <- data.frame(age = 60)
# Na osnovu modela "lm_wage" predvidjamo koliko iznosi plata 60-togodisnjeg radnika
predict(lm_wage, unseen)
ls()
library(readr)
if (!"emails_small"" %in% ls()) {
email_small <- read_csv("data/emails_small.csv")
}
library(readr)
if (!"emails_small" %in% ls()) {
email_small <- read_csv("data/emails_small.csv")
}
if (!"emails" %in% ls()) {
emails <- read_csv("data/emails_small.csv")
}
ls()
# Proveravamo strukturu seta podataka
str(emails)
# Definisemo funkciju spam_classifier()
# 1 - spam, 0 - ham
spam_classifier <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 4] <- 1
prediction[x >= 3 & x <= 4] <- 0
prediction[x >= 2.2 & x < 3] <- 1
prediction[x >= 1.4 & x < 2.2] <- 0
prediction[x > 1.25 & x < 1.4] <- 1
prediction[x <= 1.25] <- 0
return(prediction)
}
# Primenimo nas klasifikator na kolonu "avg_capital_seq": "spam_pred""
spam_pred<-spam_classifier(emails$avg_capital_seq)
# Uporedimo "spam_pred" i  "emails$spam"
spam_pred == emails$spam
identical
identical(spam_pred, emails$spam)
str(spam_pred)
is.equal()
identical(spam_pred, as.num(emails$spam))
identical(spam_pred, as.numeric(emails$spam))
linkedin_lm <- lm(linkedin ~ dani)
# Predvidjamo broj pregleda u sledeca tri dana: linkedin_pred
buduci_dani <- data.frame(dani = 22:24)
linkedin_pred <- predict(linkedin_lm, buduci_dani)
# Plotujemo "istorijske" podatke i predvidjanje
plot(linkedin ~ dani, xlim = c(1, 24))
points(22:24, linkedin_pred, col = "darkred")
# Broj pregleda vased LinkedIn profila u periodu od tri nedelje
linkedin <- c(5, 7,  4,  9, 11, 10, 14, 17, 13, 11, 18, 17, 21, 21, 24, 23, 28, 35, 21, 27, 23)
# Vektor koji sadrzi korespodentne dane: "dani"
dani <- 1:21
# Linearni model - broj pregleda po danima: linkedin_lm
linkedin_lm <- lm(linkedin ~ dani)
# Predvidjamo broj pregleda u sledeca tri dana: linkedin_pred
buduci_dani <- data.frame(dani = 22:24)
linkedin_pred <- predict(linkedin_lm, buduci_dani)
# Plotujemo "istorijske" podatke i predvidjanje
plot(linkedin ~ dani, xlim = c(1, 24))
points(22:24, linkedin_pred, col = "darkred")
?param
?plot
# Broj pregleda vased LinkedIn profila u periodu od tri nedelje
linkedin <- c(5, 7,  4,  9, 11, 10, 14, 17, 13, 11, 18, 17, 21, 21, 24, 23, 28, 35, 21, 27, 23)
# Vektor koji sadrzi korespodentne dane: "dani"
dani <- 1:21
# Linearni model - broj pregleda po danima: linkedin_lm
linkedin_lm <- lm(linkedin ~ dani)
# Predvidjamo broj pregleda u sledeca tri dana: linkedin_pred
buduci_dani <- data.frame(dani = 22:24)
linkedin_pred <- predict(linkedin_lm, buduci_dani)
# Plotujemo "istorijske" podatke i predvidjanje
plot(linkedin ~ dani, xlim = c(1, 24))
points(22:24, linkedin_pred, col = "red", pch = 16)
str(iris)
head(iris)
# Delimo "iris" na dva seta: "my_iris" i "species""
my_iris <- iris[-5]
species <- iris$Species
Da bi smo obezbedili reproduktibilnost
set.seed(1)
# Proveravamo strukturu podataka
str(iris)
head(iris)
# Delimo "iris" na dva seta: "my_iris" i "species""
my_iris <- iris[-5]
species <- iris$Species
# Vrsimo k-means klasterizaciju za "my_iris": "kmeans_iris"
kmeans_iris <- kmeans(my_iris,3)
# Poredimo dobijene klastere sa istinskim klasama (kategorijama)
table(species, kmeans_iris$cluster)
# Plot Petal.Width against Petal.Length, coloring by cluster
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
par(mrow = c(1,2))
# Plot Petal.Width against Petal.Length, coloring by cluster
par(mfrow = c(1,2))
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
plot(Petal.Length ~ Petal.Width, data = my_iris, col = iris$Species)
par(mfrow = c(1,2))
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
title("k-means klasteri")
plot(Petal.Length ~ Petal.Width, data = my_iris, col = iris$Species)
title("Istinske klase")
str(kmeans_iris)
levels(iris$Species)
str(kmeans_iris)
dim(iris)
table(iris)
table(iris$Species)
hist(iris)
boxplot(iris)
ggplot(iris, aes( x = Sepal.Width, y = Sepal.Length, col = Species)) +
geom_boxplot()
ggplot(iris, aes(col = Species)) +
geom_boxplot()
?prop.table
m <- matrix(1:4, 2)
m
prop.table(m, 1)
table(m)
?Titanic
str(Titanic)
?rpart
library(caret)
?rpart
library("rpart")
?rpart
library(rpart)
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(Titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(Survived ~ ., data = Titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = Titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(Titanic$Survived, pred)
prop.table(Titanic$Survived, pred)
str(Titanic)
Titanic$Survived
Titanic
?Titanic
as.data.frame(Titanic)
titanic
ibrary(rpart)
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(Titanic)
titanic <- as.data.frame(Titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(Survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$Survived, pred)
train <- read.csv("train.csv", header = TRUE)
test <- read.csv("test.csv", header = TRUE)
ibrary(rpart)
library(readr)
# Import podataka
if (!"titanic" %in% ls()) {
titanic <- read_csv("data/train.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(Survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$Survived, pred)
clear(titanic)
rm(titanic)
ibrary(rpart)
library(readr)
# Import podataka
if (!"titanic" %in% ls()) {
titanic <- read_csv("data/train.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(Survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$Survived, pred)
# Import podataka
if (!"titanic" %in% ls()) {
titanic <- read_csv("data/train.csv")
}
str(titanic)
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$survived, pred)
library(rpart)
library(readr)
# Import podataka
if (!"train" %in% ls()) {
train <- read_csv("data/train.csv")
}
if (!"test" %in% ls()) {
titanic <- read_csv("data/test.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(train)
str(test)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = train, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = test, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(test$survived, pred)
# Import podataka
if (!"train" %in% ls()) {
train <- read_csv("data/train.csv")
}
if (!"test" %in% ls()) {
test <- read_csv("data/test.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(train)
str(test)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = train, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = test, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(test$survived, pred)
library(rpart)
library(readr)
# Import podataka
if (!"titanic" %in% ls()) {
titanic <- read_csv("data/train.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$survived, pred)
rm(titanic)
if (!"titanic" %in% ls()) {
titanic <- read_csv("data/train.csv")
}
# Da obezbedimo reproduktibilnost
set.seed(33)
# Proveravamo strukturu data seta
str(titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$survived, pred)
# Da obezbedimo reproduktibilnost
set.seed(1)
# Proveravamo strukturu data seta
str(titanic)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(survived ~ ., data = titanic, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = titanic, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(titanic$survived, pred)
str(Titanic)
table(titanic$survived)
prop.table(table(train$Survived))
prop.table(table(train$survived))
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(species ~ ., data = iris, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = iris, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(iris$Species, pred)
head(mtcars)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(cyl ~ ., data = mtcars, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = mtcars, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(mtcars$cyl, pred)
pima
head(pima)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(test ~ ., data = pima, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = pima, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(pima$test, pred)
#Isto to sa "pima" bazom podataka
set.seed(33)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(test ~ ., data = pima, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = pima, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(pima$test, pred)
ibrary(faraway)
data(pima)
set.seed(33)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(test ~ ., data = pima, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = pima, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(pima$test, pred)
library(faraway)
data(pima)
set.seed(33)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(test ~ ., data = pima, method = "class")
# Use the predict() method to make predictions, assign to pred
pred <- predict(tree, newdata = pima, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
table(pima$test, pred)
set.seed(33)
# Generisemo klasifikacioni model (drvo odlucivanja - decision tree) na osnovu datih podataka:
tree <- rpart(test ~ ., data = pima, method = "class")
# oristimo predict() funkciju da predvidimo klase
pred <- predict(tree, newdata = pima, type = "class")
# Konstruisemo konfuzionu matricu koristeci "table()":
conf <- table(pima$test, pred)
conf
# Formiramo TP, FN, FP i TN na osnovu "conf"
TP <- conf[1,1]
FP <- conf[2,1]
FN <- conf[1,2]
TN <- conf[2,2]
# Tacnost (Accuracy)
acc<-(TP + TN)/sum(conf)
acc
# Preciznost (Precision)
prec <- TP/(TP + FP)
prec
# Senzitivnost (Sensitivity, Recall)
sens <- TP/(TP + FN)
sens
# Specificnost (Specificity)
spec <- TN/(TN + FP)
spec
str(pima)
# Take a look at the structure of air
str(pima)
# Inspect your colleague's code to build the model
fit <- lm(diabetes ~ bmi + triceps + age + glucose + diastolic, data = pima)
# Use the model to predict for all values: pred
pred <- predict(fit)
# Use air$dec and pred to calculate the RMSE
rmse <- sqrt(1/nrow(pima)*sum((pima$diabetes - pred)^2))
# Print out rmse
rmse
# Da bi smo obezbedili reproduktibilnost
set.seed(1)
# Proveravamo strukturu podataka
str(iris)
head(iris)
# Delimo "iris" na dva seta: "my_iris" i "species""
my_iris <- iris[-5]
species <- iris$Species
# Vrsimo k-means klasterizaciju za "my_iris", pretpostavljamo da postoje tri klase: "kmeans_iris"
kmeans_iris <- kmeans(my_iris,3)
# Poredimo dobijene klastere sa istinskim klasama (kategorijama)
table(species, kmeans_iris$cluster)
# Plotujemo "Petal.Width" vs "Petal.Length", bojimo po klasterima odn. postojecim kategorijama
par(mfrow = c(1,2))
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
title("k-means - klasteri")
plot(Petal.Length ~ Petal.Width, data = my_iris, col = iris$Species)
title("Istinske klase")
kmeans_iris$tot.withinss/kmeans_iris$betweenss
head(iris)
iris_1  <- gather(iris, dimension, value, - species)
library(tidyr)
iris_1  <- gather(iris, dimension, value, - species)
iris_1  <- gather(iris, dimension, value, -species)
str(iris)
iris_1  <- gather(iris, dimension, value, -Species)
head(iris_1)
iris_2  <- separete(iris_1, dimension, c("part", "dimension"), sep = ".")
iris_2  <- separate(iris_1, dimension, c("part", "dimension"), sep = ".")
head(iris_2)
str(iris_2)
head(iris_1)
iris_2  <- separate(iris_1, dimension, c("part", "dimension"))
str(iris_2)
head(iris_2)
head(iris3)
