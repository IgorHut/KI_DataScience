geom_smooth(method = "lm", se = FALSE)
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "red")
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm", colour = "red")
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm")
names(fit_1)
summary(fit_1)
fit_1
fit_1$coefficients
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "red")
fit_2 <- lm(medv ~ log(lstat), data = Boston)
abline(fit_1$coefficients, col = "red", lwd = 2)
library(MASS)
library(ISLR)
library(ggplot2)
?Boston
str(Boston)
head(Boston)
# Proverimo kako izgleda promena "medv" (median value of owner-occupied homes in \$1000s) sa
# "lstat" (lower status of the population (percent)
plot(medv~lstat,Boston)
# Kao sto vidimo postoji jasan trend opadanja vrednosti nekretnina sa porastom procenta
# siromasnijih stanovnika (ovakva korelacija je naravno i ocekivana). Ovakvi slucajevi su dobri
# kandidati za modelovanje prostom linerarnom regresijom.
fit_1 = lm(medv ~ lstat, data = Boston)
# Hajde da vidimo kako izgleda nas model
fit_1
# Detaljniji uvid
summary(fit_1)
# Sta sve model sadrzi
names(fit_1)
# Samo koeficijenti
fit_1$coefficients
# Ucrtajmo regresionu pravu na pocetni scatter plot
abline(fit_1$coefficients, col = "red", lwd = 2)
# Ili sve zajedno koristerci "ggplot2"
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, colour = "red")
# Ako zelimo i interval pouzdanosti sam izostavimo parametar "se" (podrazumevano se = TRUE)
ggplot(Boston, aes( x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm")
# Interval pouzdanosti
confint(fit_1)
# Da predvidimo vrednosti "medv" za dati vektor vrednosti "lstat" promenljive, uz
# proracun intervala pouzdanosti
predict(fit_1,data.frame(lstat = c(5,10,15)),interval = "confidence")
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
fit_2 <- lm(medv ~ log(lstat), data = Boston)
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
fit_2 <- lm(medv ~ lstat^2, data = Boston)
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
fit_2 <- lm(medv ~ lstat^2, data = Boston)
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
summary(fit_2)
summary(fit_1)
fit_2 <- lm(medv ~ I(lstat^2), data = Boston)
summary(fit_2)
plot(medv ~ lstat,Boston)
fit_2 <- lm(medv ~ I(lstat^2), data = Boston)
summary(fit_2)
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
fit_2 <- lm( lstat ~ log(medv), data = Boston)
summary(fit_2)
plot(medv ~ lstat,Boston)
abline(fit_2$coefficients, col = "red", lty = 2, lwd = 2)
shop_data
library(readr)
shop_data <- read_csv("data\shop_data.csv")
shop_data <- read_csv("data/shop_data.csv")
glimpse(shop_data)
shop_data <- read.csv("data/shop_data.csv", )
shop_data <- read.csv("data/shop_data.csv")
glimpse(shop_data)
shop_data <- read_csv("data/shop_data.csv")
shop_data <- read_csv("data/shop_data.csv")
glimpse(shop_data)
head(shop_data)
?read_csv
shop_data <- read_csv("data/shop_data.csv", col_names = TRUE)
glimpse(shop_data)
head(shop_data)
str(shop_data)
library(tidyr)
?separate
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
str(shop_data)
shop_data <- read_csv("data/shop_data.csv", col_names = TRUE)
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
str(shop_data)
head(shop_data)
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
str(shop_data)
head(shop_data)
library(purrr)
?map
shop_data <- map(shop_data, as.numeric)
str(shop_data)
head(shop_data)
head(shop_data)
str(shop_data)
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
par(mfrow = c(2,3))
library(readr)
library(tidyr)
library(purrr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
pairs(shop_data)
library(readr)
library(tidyr)
library(purrr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
lm_shop_1 <- lm( sales ~., data = sales_data)
lm_shop_1 <- lm( sales ~., data = shop_data)
summary(lm_shop_1)
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
library(readr)
library(tidyr)
library(purrr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
# Proverimo ponovo summary
summary(lm_shop_1)
library(readr)
library(tidyr)
library(purrr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
par(mfrow = c(2,1))
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
# Proverimo ponovo summary
summary(lm_shop_1)
library(readr)
library(tidyr)
library(purrr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
par(mfrow = c(1,2))
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
# Proverimo ponovo summary
summary(lm_shop_1)
library(ggpubr)
ggqqplot(lm_shop_1$residuals, ylab = "Residual Quantiles")
library(readr)
library(tidyr)
library(purrr)
library(ggpubr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
par(mfrow = c(1,2))
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
par(mfrow = c(1,1))
# Mozemo i da upotrebimo f-ju "ggqqplot" iz paketa "ggpubr" koji sadrzi funkcije za
# plotovanje "lepih" grafika:
ggqqplot(lm_shop_1$residuals, ylab = "Residual Quantiles")
# Me moze se uociti nikakav jasan "pattern" u distribucij reziduala, sta vise kvantili
# reziduala su uglavnom na liniji koja odgovara teorijskoj - normalnoj distribuciji
# Proverimo ponovo summary
summary(lm_shop_1)
# Iskoristimo sada dobijeni model da predvidimo neto prodajnu vrednost na osnovu novog
# skupa prediktora:
?abline
library(readr)
library(tidyr)
library(purrr)
library(ggpubr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
par(mfrow = c(1,2))
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
abline(0,0, col = "red")
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
par(mfrow = c(1,1))
# Mozemo i da upotrebimo f-ju "ggqqplot" iz paketa "ggpubr" koji sadrzi funkcije za
# plotovanje "lepih" grafika:
ggqqplot(lm_shop_1$residuals, ylab = "Residual Quantiles")
# Me moze se uociti nikakav jasan "pattern" u distribucij reziduala, sta vise kvantili
# reziduala su uglavnom na liniji koja odgovara teorijskoj - normalnoj distribuciji
# Proverimo ponovo summary
summary(lm_shop_1)
# Iskoristimo sada dobijeni model da predvidimo neto prodajnu vrednost na osnovu novog
# skupa prediktora:
library(readr)
library(tidyr)
library(purrr)
library(ggpubr)
# Uvoz i sredjivanje podataka
shop_data <- read_csv("data/shop_data.csv")
shop_data <- separate(shop_data, '"sales","sq_ft","inv","ads","size_dist","comp"',
c("sales","sq_ft","inv","ads","size_dist","comp"), sep = ",")
shop_data <- as.data.frame(map(shop_data, as.numeric))
str(shop_data)
head(shop_data)
# Hajde da proverimo kako se podaci ponasaju i mogu li se uociti relacije
# izmedju distribucija promenljivih koje bi ukazivale na opravdanost uvodjenja
# linearnog modela:
par(mfrow = c(2,3))
plot(sales ~ ads, shop_data)
plot(sales ~ sq_ft, shop_data)
plot(sales ~ size_dist, shop_data)
plot(sales ~ inv, shop_data)
plot(sales ~ comp, shop_data)
#Ili:
pairs(shop_data)
# Linearni model za "sales" koji ukjucuje sve prediktore (sve preostale promenljive)
lm_shop_1 <- lm( sales ~., data = shop_data)
# Proverimo parametre valjanosti modela i koliko su pojedini prediktori znacajni u modelu:
summary(lm_shop_1)
# Da bismo uopste mogli da koristimo p-vrednosti u ovom kontekstu treba prvo da proverimo
# da li je zadovoljena pretpostavka o normalnoj distribuciji reziduala!
par(mfrow = c(1,2))
# Plotujemo reziduale u funkciji fitovanih vrednosti za pojedinacje opservacije
plot(lm_shop_1$fitted.values, lm_shop_1$residuals)
abline(0,0, col = "red", lty = 2)
# Napravimo  Q-Q plot kvantila reziduala
qqnorm(lm_shop_1$residuals, ylab = "Residual Quantiles")
qqline(lm_shop_1$residuals, col = "red")
par(mfrow = c(1,1))
# Mozemo i da upotrebimo f-ju "ggqqplot" iz paketa "ggpubr" koji sadrzi funkcije za
# plotovanje "lepih" grafika:
ggqqplot(lm_shop_1$residuals, ylab = "Residual Quantiles")
# Me moze se uociti nikakav jasan "pattern" u distribucij reziduala, sta vise kvantili
# reziduala su uglavnom na liniji koja odgovara teorijskoj - normalnoj distribuciji
# Proverimo ponovo summary
summary(lm_shop_1)
# Iskoristimo sada dobijeni model da predvidimo neto prodajnu vrednost na osnovu novog
# skupa prediktora:
shop_new = data.frame("sq_ft" = 2.3, "inv" = 420, "ads" = 8.7,
"size_dist" = 9.1, "comp" = 10)
predict(lm_shop_1, shop_new)
data()
str(BJsales)
?Indometh
?Seatbelts
?ChickWeight
?crimtab
?esoph
head(esoph)
str(esoph)
esoph#ncases
esoph$ncases
?esoph
libs <- c("dplyr", "ggplot2")
lapply(libs, require, character.only = TRUE)
str(esoph)
head(esoph)
summary(esoph)
esoph
sum(esoph$ncases)/sum(esoph$ncases + esoph$ncontrols)
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(agego ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_wrap(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black") +
facet_grid(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 10) +
facet_grid(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 50) +
facet_grid(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 1) +
facet_grid(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 1) +
facet_wrap(agegp ~. )
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(fill = "stack", binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(fill = "stacked", binwidth = 1) +
facet_wrap(~ agegp)
?geom_histogram
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(position = "stack", binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases, fill = tobgp)) +
geom_histogram(position = "dodge", binwidth = 1) +
facet_wrap(~ agegp)
ggplot(esoph, aes( x = ncases)) +
geom_histogram(fill = "steelblue", color = "black", binwidth = 1) +
facet_wrap(~ agegp)
glimpse(ezoph)
glimpse(esoph)
summary(esoph)
?count
count(esoph)
esoph %>%
filter(agegp != "0-39" | tobgp == "20-29" | tobgp == "30+") %>%
summarise(sum = sum(ncontrols))
esoph_filtered <- esoph %>%
filter(agegp != "0-39" | tobgp == "20-29" | tobgp == "30+") %>%
summarise(sum = sum(ncontrols))
esoph_filtered <- esoph %>%
filter(agegp != "0-39" | tobgp == "20-29" | tobgp == "30+") %>%
summarise(sum = sum(ncases))
esoph_filtered
sum(esoph$ncases)
esoph_filtered <- esoph %>%
filter(agegp != "0-39" | tobgp == "20-29" | tobgp == "30+") %>%
summarise(n = n(), sum = sum(ncases))
esoph_filtered$sum / sum(esoph$ncases + esoph$ncontrols)
esoph_filtered <- esoph %>%
filter(alcgp != "0-39" | tobgp == "20-29" | tobgp == "30+") %>%
summarise(n = n(), sum = sum(ncases))
esoph_filtered
esoph_filtered <- esoph %>%
filter(alcgp != "0-39" & tobgp == "30+") %>%
summarise(n = n(), sum = sum(ncases))
esoph_filtered
esoph_filtered$sum / sum(esoph$ncases + esoph$ncontrols)
esoph_filtered <- esoph %>%
filter(alcgp != "0-39" & tobgp == "30+") %>%
summarise(n = n(), sum_case = sum(ncases), sum_contr = sum(ncontrols))
esoph_filtered
esoph %>%
filter(alcgp != "0-39" & tobgp == "30+") %>%
summarise(n = n(), sum_case = sum(ncases), sum_contr = sum(ncontrols), prob = sum_case / sum_contr)
